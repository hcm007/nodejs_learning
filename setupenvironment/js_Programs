# js is a programming language
** the value can be of various types, such as numbers and strings **
"""
"John" + " " + "Doe"

"""
** the var keyword tells the browser to create variables**
var x,y;
x = 5+6;
y = x*10;

** This statement tells the browser to write "Hello Dolly" inside an HTML element with id="demo"**
document.getElementById("demo").innerHTML = "Hello Dolly.";

** x,y and z are given values, and finally z is displayed: **
"""
var x,y,z;
x = 5;
y = 6;
z = x + y;
document.getElementById("demo").innerHTML = z;
"""
## js code block
** js statements can be grouped together in code blocks, inside curly brackets {...}**
** the purpose of code blocks is to define statements to be executed together **
** one place you will find statements grouped together in blocks is in js functions: **
"""
function myFunction (){
	document.getElementById("demo1").innerHTML = "Hello Dolly!";
	document.getElementById("demo2").innerHTML = "How are you?";
}
## keyword
break
continue
debugger
do ... while
for
function
if ... else
return
try ...
catch
var

** js Function syntax **
function name(parameter1, parameter2, parameter3){
	code to be executed
}
** accessing a function without () will return the function definition instead of the function result: **
"""
function toCelsius(fahrenheit){
	return (5/9) * (fahrenheit - 32);
}
document.getElementById("demo").innerHTML = toCelsius;
"""
## Accessing Object Properties

** can access object properties in two ways: **
"""
objectName.propertyName
or
objectName["propertyName"]
"""
** access object methods **
objectName.methodName()

** access the fullName method, without(), it will return the function definition:
name = person.fullName;

** js variable is declared with the keyword "new" the variable is created as an object:
var x = new String();
** in js, object and functions are also variables












